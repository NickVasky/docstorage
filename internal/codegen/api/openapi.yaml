openapi: 3.0.0
info:
  contact:
    name: Nick Vasky
  description: REST API для работы с документами.
  title: Document Storage
  version: 1.0.0
servers:
- description: Server path
  url: localhost:8080
tags:
- description: "Операции, связанные с аутентификацией и регистрацией пользователей\
    ."
  name: auth
- description: "Операции для управления документами (загрузка, получение, удаление\
    )."
  name: documents
paths:
  /api/register:
    post:
      description: Регистрирует нового пользователя. Требуется токен администратора.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Envelope"
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - BearerAuth: []
      summary: Регистрация нового пользователя (только с токеном администратора)
      tags:
      - auth
  /api/auth:
    delete:
      description: Завершает текущую авторизованную сессию пользователя.
      operationId: logoutUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Envelope"
          description: OK
      security:
      - BearerAuth: []
      summary: Завершение авторизованной сессии пользователя
      tags:
      - auth
    post:
      description: Аутентифицирует пользователя и возвращает токен доступа.
      operationId: authenticateUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AuthForm"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authenticateUser_200_response"
          description: token returned
      summary: Аутентификация пользователя
      tags:
      - auth
  /api/docs:
    get:
      description: "Возвращает список документов пользователя. Можно фильтровать п\
        о login, key, value, limit."
      operationId: listDocuments
      parameters:
      - description: Опциональное поле. Если не указано — то список своих
        explode: true
        in: query
        name: login
        required: false
        schema:
          type: string
        style: form
      - description: Filter column name
        explode: true
        in: query
        name: key
        required: false
        schema:
          type: string
        style: form
      - description: Filter value
        explode: true
        in: query
        name: value
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listDocuments_200_response"
          description: list of documents
        "401":
          description: Unauthorized
      security:
      - BearerAuth: []
      summary: Получение списка документов пользователя
      tags:
      - documents
    head:
      description: Возвращает только заголовки списка документов пользователя.
      operationId: headDocuments
      responses:
        "200":
          description: OK (no body)
      security:
      - BearerAuth: []
      summary: Получение списка документов (только заголовки)
      tags:
      - documents
    post:
      description: Загружает новый документ для пользователя. Требуется токен.
      operationId: uploadDocument
      requestBody:
        content:
          multipart/form-data:
            encoding:
              meta:
                contentType: application/json
                style: form
              json:
                contentType: application/json
                style: form
            schema:
              $ref: "#/components/schemas/uploadDocument_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadDocument_200_response"
          description: uploaded
        "400":
          description: Bad request
      security:
      - BearerAuth: []
      summary: Загрузка нового документа пользователем
      tags:
      - documents
  /api/docs/{id}:
    delete:
      description: Удаляет документ пользователя по ID. Требуется токен.
      operationId: deleteDocument
      parameters:
      - description: Document ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Envelope"
          description: deleted
        "403":
          description: Forbidden (no rights)
      security:
      - BearerAuth: []
      summary: Удаление документа пользователя
      tags:
      - documents
    get:
      description: Возвращает содержимое одного документа по ID (файл или JSON).
      operationId: getDocument
      parameters:
      - description: Document ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
            application/json:
              schema:
                description: If stored item is JSON (meta-only).
                type: object
          description: OK - file or JSON
          headers:
            ETag:
              explode: false
              schema:
                type: string
              style: simple
            Last-Modified:
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "304":
          description: Not Modified (when If-None-Match / If-Modified-Since used)
        "401":
          description: Unauthorized
      security:
      - BearerAuth: []
      summary: Получение одного документа (файл или JSON)
      tags:
      - documents
    head:
      description: Возвращает только заголовки одного документа по ID.
      operationId: headDocument
      parameters:
      - description: Document ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: "OK (no body). Should return headers (Content-Type, Content-Length,\
            \ ETag, Last-Modified)."
      security:
      - BearerAuth: []
      summary: Получение заголовков одного документа
      tags:
      - documents
components:
  schemas:
    ErrorObj:
      properties:
        code:
          example: 123
          type: integer
        text:
          example: so sad
          type: string
      required:
      - code
      - text
      type: object
    Envelope:
      description: Top-level envelope. Поля присутствуют только если заполнены.
      example:
        response:
          token: sfuqwejqjoiu93e29
      properties:
        error:
          $ref: "#/components/schemas/ErrorObj"
        response:
          description: Подтверждение действий (простые ответы)
          type: object
        data:
          type: object
      type: object
    RegisterRequest:
      example:
        pswd: pswd
        login: login
      properties:
        login:
          description: "Логин нового пользователя, минимальная длина 8, латиница и\
            \ цифры"
          minLength: 8
          pattern: "^[A-Za-z0-9]+$"
          type: string
        pswd:
          description: Пароль нового пользователя (валидация на сервере)
          minLength: 8
          type: string
      required:
      - login
      - pswd
      type: object
    AuthForm:
      example:
        login: testuser
        pswd: P@ssw0rd!
      properties:
        login:
          type: string
        pswd:
          type: string
      required:
      - login
      - pswd
      type: object
    UploadMeta:
      properties:
        name:
          example: photo.jpg
          type: string
        file:
          example: true
          type: boolean
        public:
          example: false
          type: boolean
        mime:
          example: image/jpeg
          type: string
        grant:
          example:
          - login1
          - login2
          items:
            type: string
          type: array
      required:
      - file
      - name
      type: object
    DocumentItem:
      example:
        file: true
        public: false
        created: 2000-01-23T04:56:07.000+00:00
        mime: image/jpg
        name: photo.jpg
        id: qwdj1q4o34u34ih759ou1
        grant:
        - grant
        - grant
      properties:
        id:
          example: qwdj1q4o34u34ih759ou1
          type: string
        name:
          example: photo.jpg
          type: string
        mime:
          example: image/jpg
          type: string
        file:
          example: true
          type: boolean
        public:
          example: false
          type: boolean
        created:
          format: date-time
          type: string
        grant:
          items:
            type: string
          type: array
      type: object
    DocsListResponse:
      example:
        docs:
        - file: true
          public: false
          created: 2000-01-23T04:56:07.000+00:00
          mime: image/jpg
          name: photo.jpg
          id: qwdj1q4o34u34ih759ou1
          grant:
          - grant
          - grant
        - file: true
          public: false
          created: 2000-01-23T04:56:07.000+00:00
          mime: image/jpg
          name: photo.jpg
          id: qwdj1q4o34u34ih759ou1
          grant:
          - grant
          - grant
      properties:
        docs:
          items:
            $ref: "#/components/schemas/DocumentItem"
          type: array
      type: object
    DeleteResponse:
      additionalProperties:
        type: boolean
      description: "map<id, bool>"
      type: object
    authenticateUser_200_response_response:
      example:
        token: sfuqwejqjoiu93e29
      properties:
        token:
          example: sfuqwejqjoiu93e29
          type: string
      type: object
    authenticateUser_200_response:
      example:
        response:
          token: sfuqwejqjoiu93e29
      properties:
        response:
          $ref: "#/components/schemas/authenticateUser_200_response_response"
      type: object
    listDocuments_200_response:
      example:
        data:
          docs:
          - file: true
            public: false
            created: 2000-01-23T04:56:07.000+00:00
            mime: image/jpg
            name: photo.jpg
            id: qwdj1q4o34u34ih759ou1
            grant:
            - grant
            - grant
          - file: true
            public: false
            created: 2000-01-23T04:56:07.000+00:00
            mime: image/jpg
            name: photo.jpg
            id: qwdj1q4o34u34ih759ou1
            grant:
            - grant
            - grant
      properties:
        data:
          $ref: "#/components/schemas/DocsListResponse"
      type: object
    uploadDocument_request:
      properties:
        meta:
          description: Optional JSON meta (free form).
          type: string
        json:
          description: Optional JSON payload (free form).
          type: string
        file:
          format: binary
          type: string
      required:
      - file
      - meta
      type: object
    uploadDocument_200_response_data:
      example:
        file: file
        json: "{}"
      properties:
        json:
          type: object
        file:
          type: string
      type: object
    uploadDocument_200_response:
      example:
        data:
          file: file
          json: "{}"
      properties:
        data:
          $ref: "#/components/schemas/uploadDocument_200_response_data"
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: Token
      scheme: bearer
      type: http
    XAuthToken:
      in: header
      name: X-Auth-Token
      type: apiKey
