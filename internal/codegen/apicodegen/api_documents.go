// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Document Storage
 *
 * REST API для работы с документами.
 *
 * API version: 1.0.0
 */

package apicodegen

import (
	"net/http"
	"strings"
	"os"

	"github.com/gorilla/mux"
)

// DocumentsAPIController binds http requests to an api service and writes the service results to the http response
type DocumentsAPIController struct {
	service DocumentsAPIServicer
	errorHandler ErrorHandler
}

// DocumentsAPIOption for how the controller is set up.
type DocumentsAPIOption func(*DocumentsAPIController)

// WithDocumentsAPIErrorHandler inject ErrorHandler into controller
func WithDocumentsAPIErrorHandler(h ErrorHandler) DocumentsAPIOption {
	return func(c *DocumentsAPIController) {
		c.errorHandler = h
	}
}

// NewDocumentsAPIController creates a default api controller
func NewDocumentsAPIController(s DocumentsAPIServicer, opts ...DocumentsAPIOption) *DocumentsAPIController {
	controller := &DocumentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DocumentsAPIController
func (c *DocumentsAPIController) Routes() Routes {
	return Routes{
		"ListDocuments": Route{
			"ListDocuments",
			strings.ToUpper("Get"),
			"/api/docs",
			c.ListDocuments,
		},
		"HeadDocuments": Route{
			"HeadDocuments",
			strings.ToUpper("Head"),
			"/api/docs",
			c.HeadDocuments,
		},
		"UploadDocument": Route{
			"UploadDocument",
			strings.ToUpper("Post"),
			"/api/docs",
			c.UploadDocument,
		},
		"GetDocument": Route{
			"GetDocument",
			strings.ToUpper("Get"),
			"/api/docs/{id}",
			c.GetDocument,
		},
		"HeadDocument": Route{
			"HeadDocument",
			strings.ToUpper("Head"),
			"/api/docs/{id}",
			c.HeadDocument,
		},
		"DeleteDocument": Route{
			"DeleteDocument",
			strings.ToUpper("Delete"),
			"/api/docs/{id}",
			c.DeleteDocument,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the DocumentsAPIController
func (c *DocumentsAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"ListDocuments",
			strings.ToUpper("Get"),
			"/api/docs",
			c.ListDocuments,
		},
		Route{
			"HeadDocuments",
			strings.ToUpper("Head"),
			"/api/docs",
			c.HeadDocuments,
		},
		Route{
			"UploadDocument",
			strings.ToUpper("Post"),
			"/api/docs",
			c.UploadDocument,
		},
		Route{
			"GetDocument",
			strings.ToUpper("Get"),
			"/api/docs/{id}",
			c.GetDocument,
		},
		Route{
			"HeadDocument",
			strings.ToUpper("Head"),
			"/api/docs/{id}",
			c.HeadDocument,
		},
		Route{
			"DeleteDocument",
			strings.ToUpper("Delete"),
			"/api/docs/{id}",
			c.DeleteDocument,
		},
	}
}



// ListDocuments - Получение списка документов пользователя
func (c *DocumentsAPIController) ListDocuments(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var loginParam string
	if query.Has("login") {
		param := query.Get("login")

		loginParam = param
	} else {
	}
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
	}
	var valueParam string
	if query.Has("value") {
		param := query.Get("value")

		valueParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 100
		limitParam = param
	}
	result, err := c.service.ListDocuments(r.Context(), loginParam, keyParam, valueParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadDocuments - Получение списка документов (только заголовки)
func (c *DocumentsAPIController) HeadDocuments(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HeadDocuments(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UploadDocument - Загрузка нового документа пользователем
func (c *DocumentsAPIController) UploadDocument(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	metaParam := r.FormValue("meta")
	var fileParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "file")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "file", Err: err}, nil)
			return
		}

		fileParam = param
	}
	
	
	
	
	jsonParam := r.FormValue("json")
	result, err := c.service.UploadDocument(r.Context(), metaParam, fileParam, jsonParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDocument - Получение одного документа (файл или JSON)
func (c *DocumentsAPIController) GetDocument(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetDocument(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadDocument - Получение заголовков одного документа
func (c *DocumentsAPIController) HeadDocument(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.HeadDocument(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDocument - Удаление документа пользователя
func (c *DocumentsAPIController) DeleteDocument(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteDocument(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
