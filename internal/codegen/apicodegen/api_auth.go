// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Document Storage
 *
 * REST API для работы с документами.
 *
 * API version: 1.0.0
 */

package apicodegen

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AuthAPIController binds http requests to an api service and writes the service results to the http response
type AuthAPIController struct {
	service AuthAPIServicer
	errorHandler ErrorHandler
}

// AuthAPIOption for how the controller is set up.
type AuthAPIOption func(*AuthAPIController)

// WithAuthAPIErrorHandler inject ErrorHandler into controller
func WithAuthAPIErrorHandler(h ErrorHandler) AuthAPIOption {
	return func(c *AuthAPIController) {
		c.errorHandler = h
	}
}

// NewAuthAPIController creates a default api controller
func NewAuthAPIController(s AuthAPIServicer, opts ...AuthAPIOption) *AuthAPIController {
	controller := &AuthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthAPIController
func (c *AuthAPIController) Routes() Routes {
	return Routes{
		"RegisterUser": Route{
			"RegisterUser",
			strings.ToUpper("Post"),
			"/api/register",
			c.RegisterUser,
		},
		"AuthenticateUser": Route{
			"AuthenticateUser",
			strings.ToUpper("Post"),
			"/api/auth",
			c.AuthenticateUser,
		},
		"LogoutUser": Route{
			"LogoutUser",
			strings.ToUpper("Delete"),
			"/api/auth",
			c.LogoutUser,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the AuthAPIController
func (c *AuthAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"RegisterUser",
			strings.ToUpper("Post"),
			"/api/register",
			c.RegisterUser,
		},
		Route{
			"AuthenticateUser",
			strings.ToUpper("Post"),
			"/api/auth",
			c.AuthenticateUser,
		},
		Route{
			"LogoutUser",
			strings.ToUpper("Delete"),
			"/api/auth",
			c.LogoutUser,
		},
	}
}



// RegisterUser - Регистрация нового пользователя (только с токеном администратора)
func (c *AuthAPIController) RegisterUser(w http.ResponseWriter, r *http.Request) {
	var registerRequestParam RegisterRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&registerRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegisterRequestRequired(registerRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegisterRequestConstraints(registerRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RegisterUser(r.Context(), registerRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AuthenticateUser - Аутентификация пользователя
func (c *AuthAPIController) AuthenticateUser(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	loginParam := r.FormValue("login")
	
	
	pswdParam := r.FormValue("pswd")
	result, err := c.service.AuthenticateUser(r.Context(), loginParam, pswdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LogoutUser - Завершение авторизованной сессии пользователя
func (c *AuthAPIController) LogoutUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LogoutUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
